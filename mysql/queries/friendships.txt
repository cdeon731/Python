INSERT INTO users (first_name, last_name) 
VALUES ("Casey", "D'Eon"), ("Krista", "Landry"), ("Harper", "D'Eon"), ("Will", "D'Eon"), ("Bob", "Buttons"), ("Silas", "Dinkus");

INSERT INTO friendships (user_id, friend_id) VALUES (1,2), (1,4), (1,6);

INSERT INTO friendships (user_id, friend_id) VALUES (2,1), (2,3), (2,5);

INSERT INTO friendships (user_id, friend_id) VALUES (3,2), (3,5);

INSERT INTO friendships (user_id, friend_id) VALUES (4,3);

INSERT INTO friendships (user_id, friend_id) VALUES (5,1), (5,6);

INSERT INTO friendships (user_id, friend_id) VALUES (6,2), (6,3);

SELECT users.first_name, users.last_name, user2.first_name AS friend.first_name, user2.last_name AS friend.last_name FROM users 
JOIN friendships ON users.id = friendships.user_id 
LEFT JOIN users AS user2 ON user2.id = friendships.friend_id;


NINJA Query: Return all users who are friends with the first user, make sure their names are displayed in results.

SELECT users2.first_name AS first_name, users2.last_name AS last_name, users.first_name AS friends_with FROM users
JOIN friendships ON users.id = friendships.user_id
LEFT JOIN users AS users2 ON users2.id = friendships.friend_id
WHERE users.id = 1;


NINJA Query: Return the count of all friendships

SELECT COUNT(*) AS number_of_friendships from friendships;


NINJA Query: Find out who has the most friends and return the count of their friends.

SELECT user_id, users.first_name, users.last_name, count(user_id) AS num_of_friends from friendships
JOIN users ON users.id = friendships.user_id
GROUP BY user_id
ORDER BY num_of_friends DESC
LIMIT 1;


NINJA Query: Return the friends of the third user in alphabetical order

SELECT users2.first_name AS first_name, users2.last_name AS last_name, users.first_name AS friends_with FROM users
JOIN friendships ON users.id = friendships.user_id
LEFT JOIN users AS users2 ON users2.id = friendships.friend_id
WHERE users.id = 3
ORDER BY first_name;